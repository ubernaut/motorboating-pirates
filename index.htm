<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<style type="text/css">
.shadowbox{
	background:white;
	border-radius: 10px;
	border: outset 5px;	
	box-shadow: 18px 18px 18px black;
	padding:5px;
	margin:5px;
}
.2dcanvas{
	box-shadow: 0px 0px 80px black inset;
}	
	body{
	background:lightblue;
	}
      .completions {
        position: absolute;
        z-index: 10;
        overflow: hidden;
        -webkit-box-shadow: 2px 3px 5px rgba(0,0,0,.2);
        -moz-box-shadow: 2px 3px 5px rgba(0,0,0,.2);
        box-shadow: 2px 3px 5px rgba(0,0,0,.2);
      }
      .completions select {
        background: #fafafa;
        outline: none;
        border: none;
        padding: 0;
        margin: 0;
        font-family: monospace;
      }
      .CodeMirror {
        border: 1px solid #eee;
        background: white;
      }
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  

</style>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false">
</script>
<script type="text/javascript" src="jquery-1.5.2.min.js"></script>
<script type="text/javascript" src="jquery.rotate.1-1.js"></script>
<link rel="stylesheet" href="lib/codemirror.css">
<script src="lib/codemirror.js"></script>
<link rel="stylesheet" href="mode/javascript/javascript.css">
<script src="mode/javascript/javascript.js"></script>
<link rel="stylesheet" href="css/docs.css">

<script type="text/javascript">
$(function(){
	
	$('#toggleHistoryButton').trigger('click');
	$('#togglecanvas').trigger('click');
	(function () {
		  // Minimal event-handling wrapper.
		  function stopEvent() {
		    if (this.preventDefault) {this.preventDefault(); this.stopPropagation();}
		    else {this.returnValue = false; this.cancelBubble = true;}
		  }
		  function addStop(event) {
		    if (!event.stop) event.stop = stopEvent;
		    return event;
		  }
		  function connect(node, type, handler) {
		    function wrapHandler(event) {handler(addStop(event || window.event));}
		    if (typeof node.addEventListener == "function")
		      node.addEventListener(type, wrapHandler, false);
		    else
		      node.attachEvent("on" + type, wrapHandler);
		  }

		  function forEach(arr, f) {
		    for (var i = 0, e = arr.length; i < e; ++i) f(arr[i]);
		  }

		  editor = CodeMirror.fromTextArea(document.getElementById("code"), {
		    lineNumbers: true,
		    onKeyEvent: function(i, e) {
		      // Hook into ctrl-space
		      if (e.keyCode == 32 && (e.ctrlKey || e.metaKey) && !e.altKey) {
		        e.stop();
		        return startComplete();
		      }
		    }
		  });

		  function startComplete() {
		    // We want a single cursor position.
		    if (editor.somethingSelected()) return;
		    // Find the token at the cursor
		    var cur = editor.getCursor(false), token = editor.getTokenAt(cur), tprop = token;
		    // If it's not a 'word-style' token, ignore the token.
		    if (!/^[\w$_]*$/.test(token.string)) {
		      token = tprop = {start: cur.ch, end: cur.ch, string: "", state: token.state,
		                       className: token.string == "." ? "js-property" : null};
		    }
		    // If it is a property, find out what it is a property of.
		    while (tprop.className == "js-property") {
		      tprop = editor.getTokenAt({line: cur.line, ch: tprop.start});
		      if (tprop.string != ".") return;
		      tprop = editor.getTokenAt({line: cur.line, ch: tprop.start});
		      if (!context) var context = [];
		      context.push(tprop);
		    }
		    var completions = getCompletions(token, context);
		    if (!completions.length) return;
		    function insert(str) {
		      editor.replaceRange(str, {line: cur.line, ch: token.start}, {line: cur.line, ch: token.end});
		    }
		    // When there is only one completion, use it directly.
		    if (completions.length == 1) {insert(completions[0]); return true;}

		    // Build the select widget
		    var complete = document.createElement("div");
		    complete.className = "completions";
		    var sel = complete.appendChild(document.createElement("select"));
		    sel.multiple = true;
		    for (var i = 0; i < completions.length; ++i) {
		      var opt = sel.appendChild(document.createElement("option"));
		      opt.appendChild(document.createTextNode(completions[i]));
		    }
		    sel.firstChild.selected = true;
		    sel.size = Math.min(10, completions.length);
		    var pos = editor.cursorCoords();
		    complete.style.left = pos.x + "px";
		    complete.style.top = pos.yBot + "px";
		    document.body.appendChild(complete);
		    // Hack to hide the scrollbar.
		    if (completions.length <= 10)
		      complete.style.width = (sel.clientWidth - 1) + "px";

		    var done = false;
		    function close() {
		      if (done) return;
		      done = true;
		      complete.parentNode.removeChild(complete);
		    }
		    function pick() {
		      insert(sel.options[sel.selectedIndex].value);
		      close();
		      setTimeout(function(){editor.focus();}, 50);
		    }
		    connect(sel, "blur", close);
		    connect(sel, "keydown", function(event) {
		      var code = event.keyCode;
		      // Enter and space
		      if (code == 13 || code == 32) {event.stop(); pick();}
		      // Escape
		      else if (code == 27) {event.stop(); close(); editor.focus();}
		      else if (code != 38 && code != 40) {close(); editor.focus(); setTimeout(startComplete, 50);}
		    });
		    connect(sel, "dblclick", pick);

		    sel.focus();
		    // Opera sometimes ignores focusing a freshly created node
		    if (window.opera) setTimeout(function(){if (!done) sel.focus();}, 100);
		    return true;
		  }

		  var stringProps = ("charAt charCodeAt indexOf lastIndexOf substring substr slice trim trimLeft trimRight " +
		                     "toUpperCase toLowerCase split concat match replace search").split(" ");
		  var arrayProps = ("length concat join splice push pop shift unshift slice reverse sort indexOf " +
		                    "lastIndexOf every some filter forEach map reduce reduceRight ").split(" ");
		  var funcProps = "prototype apply call bind".split(" ");
		  var keywords = ("break case catch continue debugger default delete do else false finally for function " +
		                  "if in instanceof new null return switch throw true try typeof var void while with").split(" ");

		  function getCompletions(token, context) {
		    var found = [], start = token.string;
		    function maybeAdd(str) {
		      if (str.indexOf(start) == 0) found.push(str);
		    }
		    function gatherCompletions(obj) {
		      if (typeof obj == "string") forEach(stringProps, maybeAdd);
		      else if (obj instanceof Array) forEach(arrayProps, maybeAdd);
		      else if (obj instanceof Function) forEach(funcProps, maybeAdd);
		      for (var name in obj) maybeAdd(name);
		    }

		    if (context) {
		      // If this is a property, see if it belongs to some object we can
		      // find in the current environment.
		      var obj = context.pop(), base;
		      if (obj.className == "js-variable")
		        base = window[obj.string];
		      else if (obj.className == "js-string")
		        base = "";
		      else if (obj.className == "js-atom")
		        base = 1;
		      while (base != null && context.length)
		        base = base[context.pop().string];
		      if (base != null) gatherCompletions(base);
		    }
		    else {
		      // If not, just look in the window object and any local scope
		      // (reading into JS mode internals to get at the local variables)
		      for (var v = token.state.localVars; v; v = v.next) maybeAdd(v.name);
		      gatherCompletions(window);
		      forEach(keywords, maybeAdd);
		    }
		    return found;
		  }
		})();
	
});




function runit()
{
	if(document.getElementById('cbClearCanvas').checked==true){
		var canvas = document.getElementById("canvas");
		canvas.width = canvas.width;
	}
	var post_code=document.getElementById("post_code").value;
	var pre_code=editor.getValue();//document.getElementById("code").value;
	document.getElementById("post_code").value=post_code+"\n/*Execution Time: "+ new Date()+ "*/\n"+pre_code;

	eval(editor.getValue());
	$('#post_code').attr('scrollTop',$('#post_code').attr('scrollHeight'));
}

function toggleDiv(divId,toggleBtn){

	var btvalue= $('#'+toggleBtn).attr('value');
	if(btvalue=="-"){
		$('#'+divId).hide();
		$('#'+toggleBtn).val("+");
	}
	if(btvalue=="+"){
		$('#'+divId).show();
		$('#'+toggleBtn).val("-");
	}
}


function toggleHistory(){

	var btvalue= $('#toggleHistoryButton').attr('value');
	if(btvalue=="-"){
		$('#historyDiv').hide();
		$('#toggleHistoryButton').val("+");
	}
	if(btvalue=="+"){
		$('#historyDiv').show();
		$('#toggleHistoryButton').val("-");
	}
}

function handleKeyDown() {
	keyDown(event.keyCode);
}
</script>
<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    #ifdef GL_ES
    precision highp float;
    #endif

    varying vec4 vColor;

    void main(void) {
        gl_FragColor = vColor;
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec4 aVertexColor;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    varying vec4 vColor;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vColor = aVertexColor;
    }
</script>


<script type="text/javascript">

    var gl;

    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
        gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }


    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }


    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }


    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }


    var pyramidVertexPositionBuffer;
    var pyramidVertexColorBuffer;
    var cubeVertexPositionBuffer;
    var cubeVertexColorBuffer;
    var cubeVertexIndexBuffer;

    function initBuffers() {
        pyramidVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
        var vertices = [
            // Front face
             0.0,  1.0,  0.0,
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,

            // Right face
             0.0,  1.0,  0.0,
             1.0, -1.0,  1.0,
             1.0, -1.0, -1.0,

            // Back face
             0.0,  1.0,  0.0,
             1.0, -1.0, -1.0,
            -1.0, -1.0, -1.0,

            // Left face
             0.0,  1.0,  0.0,
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        pyramidVertexPositionBuffer.itemSize = 3;
        pyramidVertexPositionBuffer.numItems = 12;

        pyramidVertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
        var colors = [
            // Front face
            1.0, 0.0, 0.0, 1.0,
            0.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,

            // Right face
            1.0, 0.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,
            0.0, 1.0, 0.0, 1.0,

            // Back face
            1.0, 0.0, 0.0, 1.0,
            0.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,

            // Left face
            1.0, 0.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 1.0,
            0.0, 1.0, 0.0, 1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        pyramidVertexColorBuffer.itemSize = 4;
        pyramidVertexColorBuffer.numItems = 12;


        cubeVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        vertices = [
            // Front face
            -1.0, -1.0,  1.0,
             1.0, -1.0,  1.0,
             1.0,  1.0,  1.0,
            -1.0,  1.0,  1.0,

            // Back face
            -1.0, -1.0, -1.0,
            -1.0,  1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0, -1.0, -1.0,

            // Top face
            -1.0,  1.0, -1.0,
            -1.0,  1.0,  1.0,
             1.0,  1.0,  1.0,
             1.0,  1.0, -1.0,

            // Bottom face
            -1.0, -1.0, -1.0,
             1.0, -1.0, -1.0,
             1.0, -1.0,  1.0,
            -1.0, -1.0,  1.0,

            // Right face
             1.0, -1.0, -1.0,
             1.0,  1.0, -1.0,
             1.0,  1.0,  1.0,
             1.0, -1.0,  1.0,

            // Left face
            -1.0, -1.0, -1.0,
            -1.0, -1.0,  1.0,
            -1.0,  1.0,  1.0,
            -1.0,  1.0, -1.0
        ];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        cubeVertexPositionBuffer.itemSize = 3;
        cubeVertexPositionBuffer.numItems = 24;

        cubeVertexColorBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        colors = [
            [1.0, 0.0, 0.0, 1.0], // Front face
            [1.0, 1.0, 0.0, 1.0], // Back face
            [0.0, 1.0, 0.0, 1.0], // Top face
            [1.0, 0.5, 0.5, 1.0], // Bottom face
            [1.0, 0.0, 1.0, 1.0], // Right face
            [0.0, 0.0, 1.0, 1.0]  // Left face
        ];
        var unpackedColors = [];
        for (var i in colors) {
            var color = colors[i];
            for (var j=0; j < 4; j++) {
                unpackedColors = unpackedColors.concat(color);
            }
        }
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
        cubeVertexColorBuffer.itemSize = 4;
        cubeVertexColorBuffer.numItems = 24;

        cubeVertexIndexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        var cubeVertexIndices = [
            0, 1, 2,      0, 2, 3,    // Front face
            4, 5, 6,      4, 6, 7,    // Back face
            8, 9, 10,     8, 10, 11,  // Top face
            12, 13, 14,   12, 14, 15, // Bottom face
            16, 17, 18,   16, 18, 19, // Right face
            20, 21, 22,   20, 22, 23  // Left face
        ];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
        cubeVertexIndexBuffer.itemSize = 1;
        cubeVertexIndexBuffer.numItems = 36;
    }


    var rPyramid = 0;
    var rCube = 0;

    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);

        mat4.translate(mvMatrix, [-1.5, 0.0, -8.0]);

        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(rPyramid), [0, 1, 0]);

        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, pyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, pyramidVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, pyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        setMatrixUniforms();
        gl.drawArrays(gl.TRIANGLES, 0, pyramidVertexPositionBuffer.numItems);

        mvPopMatrix();


        mat4.translate(mvMatrix, [3.0, 0.0, 0.0]);

        mvPushMatrix();
        mat4.rotate(mvMatrix, degToRad(rCube), [1, 1, 1]);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
        setMatrixUniforms();
        gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

        mvPopMatrix();

    }


    var lastTime = 0;

    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            rPyramid += (90 * elapsed) / 1000.0;
            rCube -= (75 * elapsed) / 1000.0;
        }
        lastTime = timeNow;
    }


    function tick() {
        requestAnimFrame(tick);
        drawScene();
        animate();
    }


    function webGLStart() {
        var canvas = document.getElementById("GLcanvas");
        initGL(canvas);
        initShaders()
        initBuffers();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        tick();
    }

</script>


</head>
<body onload="webGLStart();" >
<a href="http://learningwebgl.com/blog/?p=370" target="blank">webgltutorials</a>
<br/>
<input type="button" id="toggleGLcanvas" value="-" onclick="toggleDiv('GLcanvas','toggleGLcanvas')" >GLcanvas	<p>
<canvas id="GLcanvas" class="shadowbox" width="800" height="300"></canvas><br/>


<input type="button" id="togglecanvas" value="-" onclick="toggleDiv('canvas','togglecanvas')" >canvas	<p>
	<canvas id="canvas" class="shadowbox 2dcanvas" height="400px" width="800px"></canvas>
	
	<br/>


	<div id="inputDiv" class="inputDiv shadowbox" style="width:800px;" >
		<textarea rows="5"  id="code" style="width:800px;"  onchange="resizeDiv('inputDiv')">
   function drawT(xpos, ypos, len) {
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");
    
      ctx.fillStyle = "rgba(200,200,200,0.3)";
      ctx.beginPath();
      ctx.moveTo(xpos, ypos);
      ctx.lineTo(xpos-(len/2), ypos+((len)/2)*1.73);
      ctx.lineTo(xpos+(len/2), ypos+((len)/2)*1.73);
      ctx.closePath();
      ctx.stroke();
      if(len >1){
    	  	drawT(xpos, ypos,len/2);
     	 	drawT(xpos-(len/2), ypos+((len)/2)*1.73, len/2);
     	 	drawT(xpos+(len/2), ypos+((len)/2)*1.73, len/2);
     	 	}
	}
	drawT((document.getElementById("canvas").width)/2,0,75);
		</textarea>
  		 <input name="submit" type="button" value="Run()" onclick="runit()" style="align:right;">
  		 <input type="checkbox" id="cbClearCanvas" checked><label for="cbClearCanvas">Clear Canvas</label>
	</div>
<br/>
	<input type="button" id="toggleHistoryButton" value="-" onclick="toggleDiv('historyDiv','toggleHistoryButton');" >History	<p>
	<div id="historyDiv" class="historyDiv shadowbox" style="width:800px;">
		<textarea rows="5"  id="post_code" style="width:800px;"  onchange="resizeDiv('historyDiv')">
		
		</textarea>
	</div>
</body>
</html>
